import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

import java.util.stream.Stream

buildscript {
    configurations.classpath {
        resolutionStrategy {
            // Fix https://github.com/jreleaser/jreleaser/issues/1643
            force 'org.eclipse.jgit:org.eclipse.jgit:6.9.0.202403050737-r'
        }
    }
}

plugins {
    id "io.codearte.nexus-staging" version "0.30.0"
    id 'org.gradlex.extra-java-module-info' version '1.8' apply false
    id("com.diffplug.spotless") version "6.25.0" apply false
}

allprojects { subproject ->
    apply plugin: 'org.gradlex.extra-java-module-info'
    extraJavaModuleInfo {
        failOnMissingModuleInfo.set(false)
    }
    apply from: "$rootDir/modules.gradle"
}

subprojects {subproject ->
    if (subproject.name == 'dist') {
        return
    }

    apply plugin: 'com.diffplug.spotless'
    spotless {
        java {
            palantirJavaFormat()
            trimTrailingWhitespace()
            endWithNewline()
            importOrder('io.xpipe', 'javafx', '', 'java', '\\#')
        }
    }
}

def getArchName() {
    var arch = System.getProperty("os.arch").toLowerCase(Locale.ROOT)
    if (arch == 'amd64' || arch == 'x86_64') {
        return 'x86_64'
    }

    if (arch == 'arm' || arch == 'aarch64') {
        return 'arm64'
    }

    if (arch == 'x86') {
        return 'x86'
    }

    return arch
}

def getPlatformName() {
    def currentOS = DefaultNativePlatform.currentOperatingSystem;
    def platform = null
    if (currentOS.isWindows()) {
        platform = 'windows'
    } else if (currentOS.isLinux()) {
        platform = 'linux'
    } else if (currentOS.isMacOsX()) {
        platform = 'osx'
    }
    return platform;
}

project.ext {
    ci = System.getenv('CI') != null
    os = org.gradle.internal.os.OperatingSystem.current()
    allExtensions = Stream.concat(Stream.of(project(':base')), Arrays.stream(file("$rootDir/ext").list())
            .filter(s -> file("$rootDir/ext/$s/build.gradle").exists())
            .filter(s -> !s.equals('base') && !s.equals('csv') && !s.equals('office') && !s.equals('pdx') && !s.equals('jackson') && !s.equals(
                    'collections'))
            .map(l -> project(":$l"))).toList()
    fullVersion = file("$rootDir/private_files.txt").exists()
    arch = getArchName()
    privateExtensions = file("$rootDir/private_extensions.txt").exists() ? file("$rootDir/private_extensions.txt").readLines() : []
    isFullRelease = System.getenv('RELEASE') != null && Boolean.parseBoolean(System.getenv('RELEASE'))
    isPreRelease = System.getenv('PRERELEASE') != null && Boolean.parseBoolean(System.getenv('PRERELEASE'))
    isStage = System.getenv('STAGE') != null && Boolean.parseBoolean(System.getenv('STAGE'))
    rawVersion = file('version').text.trim()
    versionString = rawVersion + (isFullRelease || isStage ? '' : '-SNAPSHOT')
    versionReleaseNumber = rawVersion.split('-').length == 2 ? Integer.parseInt(rawVersion.split('-')[1]) : 1
    canonicalVersionString = rawVersion.split('-').length == 2 ? rawVersion.split('-')[0] : rawVersion
    buildId = UUID.nameUUIDFromBytes(versionString.getBytes())
    obfuscate = true
    changelog = file("dist/changelogs/${canonicalVersionString}.md").exists() ? file("dist/changelogs/${canonicalVersionString}.md").text.trim() + '\n' : ""
    productName = isStage ? 'XPipe PTB' : 'XPipe'
    kebapProductName = isStage ? 'xpipe-ptb' : 'xpipe'
    publisher = 'XPipe UG (haftungsbeschr√§nkt)'
    shortDescription = 'Your entire server infrastructure at your fingertips'
    longDescription = 'XPipe is a new type of shell connection hub and remote file manager that allows you to access your entire server infrastructure from your local machine. It works on top of your installed command-line programs that you normally use to connect and does not require any setup on your remote systems.'
    website = 'https://xpipe.io'
    sourceWebsite = 'https://github.com/xpipe-io/xpipe'
    authors = 'Christopher Schnick'
    javafxVersion = '22.0.1'
    platformName = getPlatformName()
    artifactChecksums = new HashMap<String, String>()
    languages = ["en", "nl", "es", "fr", "de", "it", "pt", "ru", "ja", "zh", "tr", "da"]
    jvmRunArgs = [
            "--add-opens", "java.base/java.lang=io.xpipe.app",
            "--add-opens", "java.base/java.lang=io.xpipe.core",
            "--add-opens", "java.desktop/java.awt=io.xpipe.app",
            "--add-opens", "net.synedra.validatorfx/net.synedra.validatorfx=io.xpipe.app",
            "--add-opens", "java.base/java.nio.file=io.xpipe.app",
            "--add-exports", "javafx.graphics/com.sun.javafx.tk=io.xpipe.app",
            "--add-opens", "javafx.graphics/com.sun.glass.ui=io.xpipe.app",
            "--add-opens", "javafx.graphics/javafx.stage=io.xpipe.app",
            "--add-opens", "javafx.graphics/com.sun.javafx.tk.quantum=io.xpipe.app",
            "-Xmx8g",
            "-Dio.xpipe.app.arch=$rootProject.arch",
            "-Dio.xpipe.app.languages=${String.join(";", languages)}",
            "-Dfile.encoding=UTF-8",
            // Disable this for now as it requires Windows 10+
            // '-XX:+UseZGC',
            "-Dvisualvm.display.name=XPipe",
            "-Dapple.awt.application.appearance=system"
    ]
    useBundledJavaFx = fullVersion
    useBundledJna = fullVersion
    announce = System.getenv('SKIP_ANNOUNCEMENT') == null || !Boolean.parseBoolean(System.getenv('SKIP_ANNOUNCEMENT'))
    changelogFile = file("$rootDir/dist/changelogs/${versionString}.md").exists() ?
            file("$rootDir/dist/changelogs/${versionString}.md") :
            file("$rootDir/dist/changelogs/${canonicalVersionString}.md")
    incrementalChangelogFile = file("$rootDir/dist/changelogs/${canonicalVersionString}_incremental.md")
    signingKeyId = project.hasProperty('signingKeyId') ? project.property("signingKeyId") : System.getenv('GPG_KEY_ID')
    signingKey = project.hasProperty('signingKeyFile') ? file(project.property("signingKeyFile")).text : System.getenv('GPG_KEY')
    signingPassword = project.hasProperty('signingKeyPassword') ? project.property("signingKeyPassword") : System.getenv('GPG_KEY_PASSWORD')
    if (signingPassword == null) {
        signingPassword = ''
    }
    deeplApiKey = findProperty('DEEPL_API_KEY')
}

if (org.gradle.internal.os.OperatingSystem.current() == org.gradle.internal.os.OperatingSystem.LINUX) {
    jvmRunArgs.addAll("--add-opens", "java.desktop/sun.awt.X11=io.xpipe.app")
}
if (org.gradle.internal.os.OperatingSystem.current() == org.gradle.internal.os.OperatingSystem.MAC_OS) {
    jvmRunArgs.addAll("--add-exports", "java.desktop/com.apple.eawt=io.xpipe.app")
}

if (isFullRelease && rawVersion.contains("-")) {
    throw new IllegalArgumentException("Releases must have canonical versions")
}

def replaceVariablesInFileAsString(String f, Map<String, String> replacements) {
    def fileName = file(f).getName()
    def text = file(f).text
    def replaced = text.replace(replacements)
    return replaced
}

def replaceVariablesInFile(String f, Map<String, String> replacements) {
    def fileName = file(f).getName()
    def text = file(f).text
    def replaced = text.replace(replacements)
    def build = "${project.layout.buildDirectory.get()}/${UUID.randomUUID()}"
    file(build).mkdirs()
    def temp = "$build/$fileName"
    file(temp).text = replaced
    return file(temp)
}

def testTasks = [
        project(':core').getTasksByName('test', true),
        project(':app').getTasksByName('test', true),
        project(':base').getTasksByName('localTest', true),
        project(':jdbc').getTasksByName('localTest', true),
        project(':proc').getTasksByName('localTest', true),
]


if (file("cli").exists()) {
    testTasks += [project(':cli').getTasksByName('remoteTest', true)]
}

tasks.register('testReport', TestReport) {
    getDestinationDirectory().set(file("$rootProject.buildDir/reports/all"))
    getTestResults().from(testTasks.stream().filter {!it.isEmpty()}.map {
        file("${it.project.buildDir.get(0)}/test-results/${it.name.get(0)}/binary")
    }.toList())
}

task testAll(type: DefaultTask) {
    for (final def t in testTasks) {
        t.forEach {dependsOn(it.getTaskDependencies())}
    }
    doFirst {
        for (final def t in testTasks) {
            t.forEach {it.executeTests()}
        }
    }
    finalizedBy(testReport)
}
