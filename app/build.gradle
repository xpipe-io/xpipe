plugins {
    id 'application'
    id 'jvm-test-suite'
    id 'java-library'
}

repositories {
    mavenCentral()
}

apply from: "$rootDir/gradle/gradle_scripts/java.gradle"
apply from: "$rootDir/gradle/gradle_scripts/javafx.gradle"
apply from: "$rootDir/gradle/gradle_scripts/jna.gradle"
apply from: "$rootDir/gradle/gradle_scripts/lombok.gradle"

configurations {
    implementation.extendsFrom(javafx)
    api.extendsFrom(jna)
}

dependencies {
    api project(':core')
    api project(':beacon')

    compileOnly 'org.hamcrest:hamcrest:3.0'
    compileOnly 'org.junit.jupiter:junit-jupiter-api:5.12.2'
    compileOnly 'org.junit.jupiter:junit-jupiter-params:5.12.2'

    api 'com.vladsch.flexmark:flexmark:0.64.8'
    api 'com.vladsch.flexmark:flexmark-util:0.64.8'
    api 'com.vladsch.flexmark:flexmark-util-options:0.64.8'
    api 'com.vladsch.flexmark:flexmark-util-data:0.64.8'
    api 'com.vladsch.flexmark:flexmark-util-ast:0.64.8'
    api 'com.vladsch.flexmark:flexmark-util-builder:0.64.8'
    api 'com.vladsch.flexmark:flexmark-util-sequence:0.64.8'
    api 'com.vladsch.flexmark:flexmark-util-misc:0.64.8'
    api 'com.vladsch.flexmark:flexmark-util-dependency:0.64.8'
    api 'com.vladsch.flexmark:flexmark-util-collection:0.64.8'
    api 'com.vladsch.flexmark:flexmark-util-format:0.64.8'
    api 'com.vladsch.flexmark:flexmark-util-html:0.64.8'
    api 'com.vladsch.flexmark:flexmark-util-visitor:0.64.8'
    api 'com.vladsch.flexmark:flexmark-ext-tables:0.64.8'
    api 'com.vladsch.flexmark:flexmark-ext-gfm-strikethrough:0.64.8'
    api 'com.vladsch.flexmark:flexmark-ext-gfm-tasklist:0.64.8'
    api 'com.vladsch.flexmark:flexmark-ext-footnotes:0.64.8'
    api 'com.vladsch.flexmark:flexmark-ext-definition:0.64.8'
    api 'com.vladsch.flexmark:flexmark-ext-anchorlink:0.64.8'
    api 'com.vladsch.flexmark:flexmark-ext-yaml-front-matter:0.64.8'
    api 'com.vladsch.flexmark:flexmark-ext-toc:0.64.8'

    api("com.github.weisj:jsvg:1.7.1")
    api 'io.xpipe:vernacular:1.15'
    api 'org.bouncycastle:bcprov-jdk18on:1.81'
    api 'info.picocli:picocli:4.7.6'
    api 'org.apache.commons:commons-lang3:3.17.0'
    api 'io.sentry:sentry:8.13.3'
    api 'commons-io:commons-io:2.19.0'
    api group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "2.19.1"
    api group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: "2.19.1"
    api group: 'org.kordamp.ikonli', name: 'ikonli-material2-pack', version: "12.2.0"
    api group: 'org.kordamp.ikonli', name: 'ikonli-materialdesign2-pack', version: "12.2.0"
    api group: 'org.kordamp.ikonli', name: 'ikonli-javafx', version: "12.2.0"
    api group: 'org.kordamp.ikonli', name: 'ikonli-material-pack', version: "12.2.0"
    api group: 'org.kordamp.ikonli', name: 'ikonli-feather-pack', version: "12.2.0"
    api group: 'org.slf4j', name: 'slf4j-api', version: '2.0.17'
    api group: 'org.slf4j', name: 'slf4j-jdk-platform-logging', version: '2.0.17'
    api 'io.xpipe:modulefs:0.1.6'
    api 'net.synedra:validatorfx:0.4.2'
    api files("$rootDir/gradle/gradle_scripts/atlantafx-base-2.0.2.jar")
}

apply from: "$rootDir/gradle/gradle_scripts/local_junit_suite.gradle"

def extensionJarDepList = project.allExtensions.stream().map(p -> p.getTasksByName('jar', true)).toList()
jar {
    finalizedBy(extensionJarDepList)
}

application {
    mainModule = 'io.xpipe.app'
    mainClass = 'io.xpipe.app.Main'
    applicationDefaultJvmArgs = jvmRunArgs
}

run {
    systemProperty 'io.xpipe.app.useVirtualThreads', 'false'
    systemProperty 'io.xpipe.app.mode', 'gui'
    systemProperty 'io.xpipe.app.writeLogs', "true"
    systemProperty 'io.xpipe.app.writeSysOut', "true"
    systemProperty 'io.xpipe.app.developerMode', "true"
    systemProperty 'io.xpipe.app.logLevel', "trace"
    systemProperty 'io.xpipe.app.fullVersion', rootProject.fullVersion
    systemProperty 'io.xpipe.app.staging', isStage
    // systemProperty 'io.xpipe.beacon.port', "30000"

    // Apply passed xpipe properties
    for (final def e in System.getProperties().entrySet()) {
        if (e.getKey().toString().contains("xpipe")) {
            systemProperty e.getKey().toString(), e.getValue()
        }
    }

    workingDir = rootDir
    jvmArgs += ['-XX:+EnableDynamicAgentLoading']

    def exts = files(project.allExtensions.stream().map(p -> p.getTasksByName('jar', true)[0].outputs.files.singleFile).toList())
    classpath += exts

    dependsOn(project.allExtensions.stream().map(p -> p.getTasksByName('jar', true)[0]).toList())
}

tasks.register('runAttachedDebugger', JavaExec) {
    workingDir = rootDir
    classpath = run.classpath
    mainModule = 'io.xpipe.app'
    mainClass = 'io.xpipe.app.Main'
    modularity.inferModulePath = true
    jvmArgs += jvmRunArgs
    jvmArgs += List.of(
            "-javaagent:${System.getProperty("user.home")}/.attachme/attachme-agent-1.2.9.jar=port:7857,host:localhost".toString(),
            "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=127.0.0.1:0"
    )
    jvmArgs += ['-XX:+EnableDynamicAgentLoading']
    systemProperties run.systemProperties

    def exts = files(project.allExtensions.stream().map(p -> p.getTasksByName('jar', true)[0].outputs.files.singleFile).toList())
    classpath += exts
    dependsOn(project.allExtensions.stream().map(p -> p.getTasksByName('jar', true)[0]).toList())

}

processResources {
    doLast {
        def cssFiles = fileTree(dir: "$sourceSets.main.output.resourcesDir/io/xpipe/app/resources/style")
        cssFiles.include "**/*.css"
        cssFiles.each { css ->
            providers.javaexec {
                workingDir = project.projectDir
                getJvmArguments().addAll("--module-path=${configurations.javafx.asFileTree.asPath},", "--add-modules=javafx.graphics")
                mainClass = "com.sun.javafx.css.parser.Css2Bin"
                args css
            }

            delete css
        }
    }

    doLast {
        def resourcesDir = new File(sourceSets.main.output.resourcesDir, "io/xpipe/app/resources/third-party")
        resourcesDir.mkdirs()
        copy {
            from "$rootDir/dist/licenses"
            into resourcesDir
        }
    }
}

distTar {
    enabled = false
}

distZip {
    enabled = false
}

assembleDist {
    enabled = false
}